#!/usr/bin/env python

import sys

try:
  import sh
except ImportError:
  sys.stderr.write("Please install the sh module.\n")
  sys.stderr.write("pip install sh\n")
  sys.exit(1)

if len(sys.argv) == 3:
    _, a, b = sys.argv
elif len(sys.argv) == 2:
    _, a, = sys.argv
    b = "HEAD"
else:
  sys.stderr.write("Usage:\n")
  sys.stderr.write("git-relate <commit> [<commit>]\n")
  sys.exit(1)

def rev_parse(commit):
  try:
    res = sh.git("rev-parse", "--verify", commit)
  except sh.ErrorReturnCode:
    sys.stderr.write("Commit {} is invalid.\n".format(commit))
    sys.exit(1)
  return str(res).strip()

A, B = rev_parse(a), rev_parse(b)

if A == B:
  print "Those are the same commit."
  sys.exit(0)

# print "Comparing {} ({}) and {} ({})".format(
#   a, A[:7], b, B[:7])

def is_ancestor(c1, c2):
  """Is c1 an ancestor of c2?"""
  res = sh.git("merge-base", "--is-ancestor", c1, c2, _ok_code=[0, 1])
  return res.exit_code == 0

def merge_base(c1, c2):
  res = sh.git("merge-base", c1, c2)
  return str(res).strip()

def friendly_name(c):
  res = sh.git("name-rev", c)
  return str(res).strip().split(" ")[1]

def commits_between(c1, c2):
  res = sh.git("rev-list", c1, "^" + c2, "--count")
  return int(str(res))

def present(c, C):
  return "{} ({})".format(c, C[:7])

a_ancestor_b = is_ancestor(A, B)
b_ancestor_a = is_ancestor(B, A)

if a_ancestor_b and b_ancestor_a:
  print "They are ancestors of each other. (huh?)"
elif a_ancestor_b:
  n = commits_between(B, A)
  # print "{} ({}) is an ancestor of {} ({}) by {} commits".format(a, A[:7], b, B[:7], n)
  print "{} -> {} commits -> {}".format(present(a, A), n, present(b, B))
elif b_ancestor_a:
  n = commits_between(A, B)
  # print "{} ({}) is an ancestor of {} ({}) by {} commits".format(b, B[:7], a, A[:7], n)
  print "{} -> {} commits -> {}".format(present(b, B), n, present(a, A))
else:
  C = merge_base(A, B)
  c = friendly_name(C)
  print "The common ancestor is {} ({})".format(c, C[:7])
