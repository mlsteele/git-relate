#!/usr/bin/env python

import sys

try:
  import sh
except ImportError:
  sys.stderr.write("Please install the sh module.\n")
  sys.stderr.write("pip install sh\n")
  sys.exit(1)

if len(sys.argv) == 3:
    _, a, b = sys.argv
elif len(sys.argv) == 2:
    _, a, = sys.argv
    b = "HEAD"
else:
  sys.stderr.write("Usage:\n")
  sys.stderr.write("git-relate <commit> [<commit>]\n")
  sys.exit(1)

def rev_parse(commit):
  try:
    res = sh.git("rev-parse", "--verify", commit)
  except sh.ErrorReturnCode:
    sys.stderr.write("Commit {} is invalid.\n".format(commit))
    sys.exit(1)
  return str(res).strip()

A, B = rev_parse(a), rev_parse(b)

if A == B:
  print("{} and {} are the same commit: {}".format(a, b, A[:9]))
  sys.exit(0)

# print("Comparing {} ({}) and {} ({})".format(
#   a, A[:9], b, B[:9]))

def is_ancestor(c1, c2):
  """Is c1 an ancestor of c2?"""
  res = sh.git("merge-base", "--is-ancestor", c1, c2, _ok_code=[0, 1])
  return res.exit_code == 0

def merge_base(c1, c2):
  res = sh.git("merge-base", c1, c2, _ok_code=[0, 1])
  if res.exit_code == 0:
    return str(res).strip()
  if res.exit_code == 1:
    return None
  raise RuntimeError("merge-base returned unexpected status code")

def friendly_name(c):
  res = sh.git("name-rev", c)
  return str(res).strip().split(" ")[1]

def commits_between(c1, c2):
  res = sh.git("rev-list", c2, "^" + c1, "--count")
  return int(str(res))

def commits_between_str(c1, c2):
  n = commits_between(c1, c2)
  return "{} commits".format(n) if n != 1 else "1 commit"

def present(c, C):
  if c == C[:9]:
    return c
  return "{} ({})".format(c, C[:9])

a_ancestor_b = is_ancestor(A, B)
b_ancestor_a = is_ancestor(B, A)

if a_ancestor_b and b_ancestor_a:
  print("They are ancestors of each other. (huh?)")
elif a_ancestor_b:
  print("{} ── {} ─→ {}".format(present(a, A),
    commits_between_str(A, B), present(b, B)))
elif b_ancestor_a:
  print("{} ── {} ─→ {}".format(present(b, B),
    commits_between_str(B, A), present(a, A)))
else:
  C = merge_base(A, B)
  if C != None:
    c = friendly_name(C)
    print("common ancestor: {}".format(present(c, C)))
    print("├── {} ─→ {}".format(commits_between_str(C, A), present(a, A)))
    print("└── {} ─→ {}".format(commits_between_str(C, B), present(b, B)))
  else:
    print("No common ancestor")
